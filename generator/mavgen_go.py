#!/usr/bin/env python
'''
parse a MAVLink protocol XML file and generate a Go implementation


'''
from __future__ import print_function

from builtins import range
import os
import platform
from . import mavtemplate

t = mavtemplate.MAVTemplate()

# todo - refactor this in to the other array
map = {
        'float'    : 'float32',
        'double'   : 'float64',
        'char'     : 'byte',
        'int8_t'   : 'int8',
        'uint8_t'  : 'uint8',
        'uint8_t_mavlink_version'  : 'B',
        'int16_t'  : 'int16',
        'uint16_t' : 'uint16',
        'int32_t'  : 'int32',
        'uint32_t' : 'uint32',
        'int64_t'  : 'int64',
        'uint64_t' : 'uint64',
        }

# Map of field type to bitconverter bytedecoding function, and number of bytes used for the encoding
mapType = {
        'float'    : ('ToSingle', 4),
        'double'   : ('ToDouble', 8),
        'int8_t'   : ('ToInt8', 1),
        'uint8_t'   : ('ToUInt8', 1),
        'char'   :   ('ToChar', 1),
        'int16_t'  : ('ToInt16', 2),
        'uint16_t' : ('ToUInt16', 2),
        'int32_t'  : ('ToInt32', 4),
        'uint32_t' : ('ToUInt32', 4),
        'int64_t'  : ('ToInt64', 8),
        'uint64_t' : ('ToUInt64', 8),
        }

# Map of field names to names that are C# compatible and not illegal class field names
mapFieldName = {
        'fixed'    : '@fixed'
        }


def generate_preamble(outf, msgs, args, xml):
    print("Generating preamble")
    t.write(outf, """
/*
MAVLink protocol implementation (auto-generated by mavgen_go.py)

Generated from: ${FILELIST}

Note: this file has been auto-generated. DO NOT EDIT
*/
""", {'FILELIST' : ",".join(args)})


def generate_xmlDocSummary(outf, summaryText, tabDepth):
    indent = '\t'
    escapedText = summaryText.replace("\n","\n%s//" % indent)
#    outf.write("\n%s/// <summary>\n" % indent)
    outf.write("%s// %s\n" % (indent, escapedText))
#    outf.write("%s/// </summary>\n" % indent)

def generate_const(outf, enums):
    print("Generating enums")
    outf.write("\n\n// const for MAVLink \n\n")
    for e in enums:
            #if len(e.description) > 0:
        generate_xmlDocSummary(outf, e.description, 1)
        outf.write("const( // %s \n" % e.name)
        for entry in e.entry:
            if len(entry.description) > 0:
                generate_xmlDocSummary(outf, entry.description, 2)
            outf.write("\t%s = %u\n" % (entry.name, entry.value))

        outf.write(")\n\n")
    outf.write("// end\n")

def generate_structs(outf, msgs):
    print("Generating structs")
    outf.write("""

""" )
    for m in msgs:
        if (len(m.description) > 0):
            generate_xmlDocSummary(outf, m.description, 1)

def generate_map(outf, msgs):
    print("Generating map definitions")
    outf.write("""
var messages = map[uint8]MAVLinkMessage{
    """)
    for m in msgs:
        outf.write("\t%u: &%s{},\n" % (m.id, m.name.capitalize()) )

    outf.write("""
}""")


def generate_classes(outf, msgs):
    print("Generating struct definitions")
    outf.write("""

//Generating Messages
""" )
    for m in msgs:
        if (len(m.description) >0):
            generate_xmlDocSummary(outf, m.description, 1)
        outf.write("type %s struct {\n" % m.name.lower())
        for f in m.fields:
            if (f.description.upper() != f.name.upper()):
                generate_xmlDocSummary(outf, f.description, 2)
            if (f.array_length):
                outf.write("\t%s [%s]%s\n" % mapFieldName.get(f.name, f.name), f.array_length, map[f.type])
            else:
                outf.write("\t%s %s\n" % (mapFieldName.get(f.name, f.name), map[f.type]))
        outf.write("}\n\n")
        outf.write("""func (*%s) Id() uint8 {\n
        return %s
}
""" % m.name.lower(), m.id)
        outf.write("""func (*%s) Len() uint8 {
        return %s
}
""" % m.name.lower(), m.id)
        outf.write("""func (*%s) Crc() uint8 {
        return %s
}
""" % m.name.lower(), m.id)


def copy_fixed_headers(directory, xml):
    '''copy the mavlink.go to the target directory'''
    import shutil
    hlist = [ 'mavlink.go' ]
    basepath = os.path.dirname(os.path.realpath(__file__))
    srcpath = os.path.join(basepath, 'go/')
    print("Copying fixed headers")
    for h in hlist:
        src = os.path.realpath(os.path.join(srcpath, h))
        if not os.path.exists(directory) :
            os.makedirs(directory)
        dest = os.path.realpath(os.path.join(directory, h))
        shutil.copy(src, dest)


def generate(basename, xml):
    '''generate complete MAVLink Go implemenation'''
    copy_fixed_headers(basename, xml)

    generatedGoFilename = basename + '/generated.go'
    print("genratedGoFile : %s" % generatedGoFilename)

    msgs = []
    enums = []
    filelist = []
    for x in xml:
        msgs.extend(x.message)
        enums.extend(x.enum)

    for m in msgs:
        m.order_map = [ 0 ] * len(m.fieldnames)
        for i in range(0, len(m.fieldnames)):
            m.order_map[i] = m.ordered_fieldnames.index(m.fieldnames[i])

        m.fields_in_order = []
        for i in range(0, len(m.fieldnames)):
            m.order_map[i] = m.ordered_fieldnames.index(m.fieldnames[i])

    print("Generating messages file: %s" % generatedGoFilename)
    dir = os.path.dirname(generatedGoFilename)
    if not os.path.exists(dir):
        os.makedirs(dir)
    outf = open(generatedGoFilename, "w")
    generate_preamble(outf, msgs, filelist, xml[0])

    outf.write("""

package mavlink

import (
    "bytes"
    "encoding/binary"
    "fmt"
)

const (
	MAVLINK_BUILD_DATE               = "Thu Jun 08 08:12:05 2017"
	MAVLINK_WIRE_PROTOCOL_VERSION    = "2.0"
	MAVLINK_MAX_DIALECT_PAYLOAD_SIZE = 255
	MAVLINK_VERSION                  = 3 //from xml
)

    """)

    generate_map(outf, msgs)
    generate_const(outf, enums)
    generate_structs(outf, msgs) #generate_classes(outf, msgs)
    outf.close()

    print("Built Go files")
